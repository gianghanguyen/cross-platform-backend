// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  isActivated  Boolean        @default(false)
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Profile      Profile?
  Food         Food[]
  groups       UserGroup[]
  ShoppingList ShoppingList[]
  Task         Task[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  role      Role     @default(USER)
  language  Language @default(EN)
  gender    Gender
  timezone  Int      @default(7)
  birthDate DateTime
  photoURL  String
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Language {
  EN
  VN
}

enum Role {
  USER
  ADMIN
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id           Int            @id @default(autoincrement())
  name         String
  photoUrl     String?
  users        UserGroup[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ShoppingList ShoppingList[]
}

model UserGroup {
  userId  Int
  user    User      @relation(fields: [userId], references: [id])
  groupId Int
  group   Group     @relation(fields: [groupId], references: [id])
  role    GroupRole @default(MEMBER)

  @@id([userId, groupId])
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Food      Food[]
}

model UnitOfMeasure {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Food      Food[]
}

model Food {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  imageURL   String
  userId     Int
  categoryId Int
  unitId     Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  category   Category      @relation(fields: [categoryId], references: [id])
  unit       UnitOfMeasure @relation(fields: [unitId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  Task       Task[]
}

model ShoppingList {
  id        Int      @id @default(autoincrement())
  creatorId Int
  groupId   Int?
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [creatorId], references: [id])
  group     Group?    @relation(fields: [groupId], references: [id])
  Task      Task[]   
}

model Task {
  id             Int          @id @default(autoincrement())
  shoppingListId Int
  assigneeId     Int?
  foodId         Int
  deadline       DateTime
  quantity       Int
  done           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignee       User?         @relation(fields: [assigneeId], references: [id])
  food           Food         @relation(fields: [foodId], references: [id])
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
}
