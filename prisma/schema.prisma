// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  isActivated Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Profile     Profile?
  Food        Food[]
  groups      UserGroup[]
  recipes     Recipe[]
  fridgeItems FridgeItem[]  
  mealPlan    MealPlan[]   
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  role      Role     @default(USER)
  language  Language @default(EN)
  gender    Gender
  timezone  Int      @default(7)
  birthDate DateTime
  photoURL  String
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Language {
  EN
  VN
}

enum Role {
  USER
  ADMIN
}

model Admin {
  id            Int       @default(autoincrement()) @id
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Group {
  id            Int       @default(autoincrement()) @id
  name          String    
  photoUrl      String?
  users         UserGroup[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserGroup {
  userId        Int       
  user          User      @relation(fields: [userId], references: [id])
  groupId       Int
  group         Group     @relation(fields: [groupId], references: [id])
  role          GroupRole @default(MEMBER)

  @@id([userId, groupId]) 
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Food      Food[]
}

model UnitOfMeasure {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Food      Food[]
}

model Food {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  imageURL    String?
  userId      Int
  categoryId  Int
  unitId      Int
  mealPlans   MealPlan[]
  fridgeItems FridgeItem[]
  recipes     Recipe[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation(fields: [categoryId], references: [id])
  unit        UnitOfMeasure @relation(fields: [unitId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model Recipe {
  id          Int           @id @default(autoincrement())
  name        String 
  description String?
  htmlContent String?
  foods       Food[]
  creatorId   Int
  creator     User          @relation(fields: [creatorId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
} 

model FridgeItem {
  id          Int           @id @default(autoincrement())
  quantity    Int
  note        String?
  startDate   DateTime      
  expiredDate DateTime
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  foodId      Int      
  food        Food          @relation(fields: [foodId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model MealPlan {
  id          Int           @id @default(autoincrement())
  name        String
  timestamp   DateTime
  status      MealPlanStatus  @default(NOT_PASS_YET)
  foods       Food[]
  creatorId   Int
  creator        User          @relation(fields: [creatorId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum MealPlanStatus {
  DONE
  NOT_PASS_YET
}